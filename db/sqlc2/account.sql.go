// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: account.sql

package db

import (
	"context"
	
)

const createAccount = `-- name: CreateAccount :exec
INSERT INTO accounts (owner, balance, currency)
VALUES (?,?,?)
`

type CreateAccountParams struct {
	Owner    string `json:"owner"`
	Balance  int64  `json:"balance"`
	Currency string `json:"currency"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) error {
	_, err := q.db.ExecContext(ctx, createAccount, arg.Owner, arg.Balance, arg.Currency)
	return err
}

const deleteAccountById = `-- name: DeleteAccountById :exec
Delete FROM accounts
`

func (q *Queries) DeleteAccountById(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAccountById)
	return err
}

const getAccount = `-- name: GetAccount :one
SELECT id, owner, balance, currency, created_at FROM accounts ORDER BY ID DESC LIMIT 1
`

func (q *Queries) GetAccount(ctx context.Context) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccount)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const getListAccount = `-- name: GetListAccount :many
SELECT id, owner, balance, currency, created_at FROM accounts LIMIT ? OFFSET ?
`

type GetListAccountParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetListAccount(ctx context.Context, arg GetListAccountParams) ([]Account, error) {
	rows, err := q.db.QueryContext(ctx, getListAccount, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.Owner,
			&i.Balance,
			&i.Currency,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUpdatedAccount = `-- name: GetUpdatedAccount :one
SELECT id, owner, balance, currency, created_at FROM accounts WHERE id = LAST_UPDATE_ID()
`

func (q *Queries) GetUpdatedAccount(ctx context.Context) (Account, error) {
	row := q.db.QueryRowContext(ctx, getUpdatedAccount)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const scoreAndTests = `-- name: ScoreAndTests :many
SELECT accounts.id, accounts.owner, accounts.balance, accounts.currency, accounts.created_at, entries.id, entries.account_id, entries.amount, entries.created_at FROM accounts accounts, entries entries WHERE entries.account_id = accounts.id
`

type ScoreAndTestsRow struct {
	ID          int64     `json:"id"`
	Owner       string    `json:"owner"`
	Balance     int64     `json:"balance"`
	Currency    string    `json:"currency"`
	CreatedAt   string `json:"created_at"`
	ID_2        int64     `json:"id_2"`
	AccountID   int64     `json:"account_id"`
	Amount      int64     `json:"amount"`
	CreatedAt_2 string `json:"created_at_2"`
}

func (q *Queries) ScoreAndTests(ctx context.Context) ([]ScoreAndTestsRow, error) {
	rows, err := q.db.QueryContext(ctx, scoreAndTests)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ScoreAndTestsRow
	for rows.Next() {
		var i ScoreAndTestsRow
		if err := rows.Scan(
			&i.ID,
			&i.Owner,
			&i.Balance,
			&i.Currency,
			&i.CreatedAt,
			&i.ID_2,
			&i.AccountID,
			&i.Amount,
			&i.CreatedAt_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccounts = `-- name: UpdateAccounts :exec
UPDATE accounts SET balance = ? WHERE id =?
`

type UpdateAccountsParams struct {
	Balance int64 `json:"balance"`
	ID      int64 `json:"id"`
}

func (q *Queries) UpdateAccounts(ctx context.Context, arg UpdateAccountsParams) error {
	_, err := q.db.ExecContext(ctx, updateAccounts, arg.Balance, arg.ID)
	return err
}
